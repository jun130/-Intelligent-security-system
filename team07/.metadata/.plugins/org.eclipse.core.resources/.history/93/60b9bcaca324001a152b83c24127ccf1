#include "stm32f10x.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_tim.h"
#include "stm32f10x_adc.h"
#include "stm32f10x_exti.h"
#include "misc.h"
#include "core_cm3.h"

#include "lcd.h"

int keypad_input[10] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };  // 키패드 입력 버퍼
int password[10] = { 1, 2, 3, 4, -1, -1, -1, -1, -1, -1 };        // 비밀번호 배열
int status = 0;       // 0 이면 열림모드, 1 이면 방범모드
int fail_counter = 0;       // 비밀번호 틀림 횟수 카운터
int motion_flag = 0;        // 움직임 센서 탐지 여부 (1이면 탐지)
int door_flag = 0;          // 문 열림 센서 탐지 여부 (1이면 열림상태)
int fail_flag = 0; // 비밀번호 3회 이상 틀리면 fail_flag = 1

int i = 0, j = 0;
int value = -1;
int password_index = -1;

uint16_t Pulse[2] = { 2300, 700 };

void openDoor();
void closeDoor();
void TIM_Init();

void RCC_Configure(void) {
   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2ENR_AFIOEN, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPAEN, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPDEN, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPCEN, ENABLE);

   // led 테스트용
}

void GPIO_Configure(void) {
	// 4개는 output, 4개는 input
			   GPIO_InitTypeDef GPIO_InitStructure;

			   //USART1
			   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_9;
			   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
			   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
			   GPIO_Init(GPIOA, &GPIO_InitStructure);

			   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_10;
			   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
			   GPIO_Init(GPIOA, &GPIO_InitStructure);

			   // input
			   GPIO_InitStructure.GPIO_Pin = (GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11);
			   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
			   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
			   // pull-down down일 때 low
			   // GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
			   GPIO_Init(GPIOD, &GPIO_InitStructure);

			   // output
			   GPIO_InitStructure.GPIO_Pin = (GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
			   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
			   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
			   GPIO_Init(GPIOD, &GPIO_InitStructure);

			   // led 1 테스트용
			   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_7;
			   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
			   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
			   GPIO_Init(GPIOD, &GPIO_InitStructure);

			   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
			   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
			   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
			   GPIO_Init(GPIOC, &GPIO_InitStructure);
			   GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE);

			   // PIR sensor
			   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
			   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
			   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
			   GPIO_Init(GPIOC, &GPIO_InitStructure);

			   //Door sensor
			   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
			   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
			   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
			   GPIO_Init(GPIOC, &GPIO_InitStructure);

			   GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource1);
			   GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource2);

}

void NVIC_Configuration() {

   NVIC_InitTypeDef NVIC_InitStructure;

   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

   NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;

   NVIC_Init(&NVIC_InitStructure);

   NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;

   NVIC_Init(&NVIC_InitStructure);

}

void EXTI_Configuration() {

   EXTI_InitTypeDef EXTI_InitStructure;

   EXTI_InitStructure.EXTI_Line = EXTI_Line1;
   EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;

   EXTI_Init(&EXTI_InitStructure);

   EXTI_InitStructure.EXTI_Line = EXTI_Line2;
   EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;

   EXTI_Init(&EXTI_InitStructure);

}

void EXTI1_IRQHandler(void) {

   if (EXTI_GetITStatus(EXTI_Line1) != RESET) { /* motion sensing */

      if (GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_1)) {
         GPIO_SetBits(GPIOD, GPIO_Pin_2);
         motion_flag = 1;
         /* signal "people exist" */
      } else if (!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_1)) {

         motion_flag = 0;
         GPIO_ResetBits(GPIOD, GPIO_Pin_2);

      }
      EXTI_ClearITPendingBit(EXTI_Line1);

   }

}

void EXTI2_IRQHandler(void) {

   if (EXTI_GetITStatus(EXTI_Line2) != RESET) {

      /* signal "door open" */
      if (GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_2)) {
         GPIO_SetBits(GPIOD, GPIO_Pin_3);
         /* signal "door open" */
         door_flag = 1;
      } else if (!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_2)) {

         GPIO_ResetBits(GPIOD, GPIO_Pin_3);
         door_flag = 0;
         /* signal "door close" */
      }

      EXTI_ClearITPendingBit(EXTI_Line2);
   }

}

void delay(int time) {
   int i;
   int delay_time = 50000 * time;
   for (i = 0; i < delay_time; i++) {
   }
}

/*
 노란선 : PC9
 빨간선 : VCC
 갈색선 : Ground
 */

void openDoor() {
   TIM_OCInitTypeDef TIM_OCInitStructure;
   TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   TIM_OCInitStructure.TIM_Pulse = Pulse[0];
   TIM_OC4Init(TIM3, &TIM_OCInitStructure);

}

void closeDoor() {
   TIM_OCInitTypeDef TIM_OCInitStructure;
   TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   TIM_OCInitStructure.TIM_Pulse = Pulse[1];
   TIM_OC4Init(TIM3, &TIM_OCInitStructure);
}

void TIM_Init() {

   TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

   TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
   TIM_ARRPreloadConfig(TIM3, ENABLE);
   TIM_Cmd(TIM3, ENABLE);

   TIM_TimeBaseStructure.TIM_Period = 20000 - 1;
   TIM_TimeBaseStructure.TIM_Prescaler = (uint16_t) (SystemCoreClock / 1000000)
         - 1;
   TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

   TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

}

void INPUT_PASSWORD() {

   GPIO_ResetBits(GPIOA, GPIO_Pin_4);
   GPIO_SetBits(GPIOA, GPIO_Pin_5);
   GPIO_SetBits(GPIOA, GPIO_Pin_6);
   GPIO_SetBits(GPIOA, GPIO_Pin_7);
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
      value = 'D';
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1)) {
      value = '#';
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2)) {
      value = 0;
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3)) {
      value = '*';
      delay(1);
   }

   GPIO_SetBits(GPIOA, GPIO_Pin_4);
   GPIO_ResetBits(GPIOA, GPIO_Pin_5);
   GPIO_SetBits(GPIOA, GPIO_Pin_6);
   GPIO_SetBits(GPIOA, GPIO_Pin_7);
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
      value = 'C';
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1)) {
      value = 9;
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2)) {
      value = 8;
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3)) {
      value = 7;
      delay(1);
   }

   GPIO_SetBits(GPIOA, GPIO_Pin_4);
   GPIO_SetBits(GPIOA, GPIO_Pin_5);
   GPIO_ResetBits(GPIOA, GPIO_Pin_6);
   GPIO_SetBits(GPIOA, GPIO_Pin_7);
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
      value = 'B';
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1)) {
      value = 6;
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2)) {
      value = 5;
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3)) {
      value = 4;
      delay(1);
   }

   GPIO_SetBits(GPIOA, GPIO_Pin_4);
   GPIO_SetBits(GPIOA, GPIO_Pin_5);
   GPIO_SetBits(GPIOA, GPIO_Pin_6);
   GPIO_ResetBits(GPIOA, GPIO_Pin_7);
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
      value = 'A';
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1)) {
      value = 3;
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2)) {
      value = 2;
      delay(1);
   }
   while (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3)) {
      value = 1;
      delay(1);
   }

}

void Check_Password() {

   if ((value > 0 && value < 10) || value == 'A' || value == 'B'
         || value == 'C' || value == 'D' ) {
      password_index = (password_index + 1) % 10;
      // 10자 넘어가면 어떤 방식으로 신호를 줌
      keypad_input[password_index] = value;
   }

   if (value == '*') {
      // 패스워드 입력 종료
      password_index = -1;
      for (i = 0; i < 10; i++) {
         if (keypad_input[i] != password[i]) {
            fail_counter++;

            for (j = 0; j < 10; j++) {
               keypad_input[j] = -1;
            }         // 입력 버퍼 초기화
            return;
         }
      }

      /* 비밀번호 맞았을때 */
      for (j = 0; j < 10; j++) {
         keypad_input[j] = -1;
      }      // 입력 버퍼 초기화
      status = 0;
      fail_flag = 0;
      fail_counter = 0;
      openDoor();
   }

   if (fail_counter >= 3) {
      /* 비밀번호 실패 */
      fail_flag = 1;
   }
}
/* main */
int main(void) {
   int p = 0;
   SystemInit();
   RCC_Configure();
   GPIO_Configure();
   TIM_Init();
   NVIC_Configuration();
   EXTI_Configuration();
   LCD_Init();
   LCD_Clear(WHITE);


   LCD_ShowString(100,100, "123",BLACK,WHITE);
   LCD_DrawCircle(10,20,20);
   //closeDoor();

   if (motion_flag == 1) { /* signal "people exist" */

   } else if (motion_flag == 0) { /* signal "people not exist" */

   }
   if (door_flag == 1) { /* signal "door open" */

   } else if (door_flag == 0) { /* signal "door close" */

   }

   while (1) {
      //LCD_ShowNum(10,100,123,4,BLACK, WHITE);

      value = -1;
      if (status == 0) {
         GPIO_SetBits(GPIOD, GPIO_Pin_4);
         GPIO_ResetBits(GPIOD, GPIO_Pin_7);
         // 문열림 상태일 때
         INPUT_PASSWORD();

         if (value == '#') {
            if (door_flag == 0) {
               closeDoor();
               status = 1;
            }

         }

         if (value == '*') {     // 문 열림 상태에서 #을 누르면 비밀번호 변경 상태로 감
            for (i = 0; i < 10; i++) {
               password[i] = -1;
            }         // 패스워드 초기화
            password_index = -1;

            while (1) {
               value = -1;
               INPUT_PASSWORD();

               if ((value > 0 && value < 10) || value == 'A'
                     || value == 'B' || value == 'C' || value == 'D') { // #이랑 * 빼고 모든 문자
                  password_index = (password_index + 1) % 10;
                  password[password_index] = value;
               }
               if (value == '*') {
                  break;
               }        // 비밀번호 변경 상태에서 다시 * 입력되면 비밀번호 변경 끝

            }
         }

      } else if (status == 1) {           // 문 잠김 (방범모드)

         GPIO_SetBits(GPIOD, GPIO_Pin_7);
         GPIO_ResetBits(GPIOD, GPIO_Pin_4);
         if (fail_flag == 1) { /* 비밀번호 3회이상 실패 */

         }
         if (door_flag == 1) { /* signal "door open" */

         }
         if (motion_flag == 1) {
            motion_flag =0;
         }

         INPUT_PASSWORD();
         Check_Password();
      }
   }

   return 0;
}
